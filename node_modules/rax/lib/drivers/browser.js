'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _setNativeProps = require('../setNativeProps');

var _setNativeProps2 = _interopRequireDefault(_setNativeProps);

var _unit = require('../style/unit');

var _flexbox = require('../style/flexbox');

var _flexbox2 = _interopRequireDefault(_flexbox);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var FULL_WIDTH_REM = 750; /**
                           * Web Browser driver
                           **/

var STYLE = 'style';
var DANGEROUSLY_SET_INNER_HTML = 'dangerouslySetInnerHTML';

var Driver = {
  getElementById: function getElementById(id) {
    return document.getElementById(id);
  },
  createBody: function createBody() {
    return document.body;
  },
  createFragment: function createFragment() {
    return document.createDocumentFragment();
  },
  createComment: function createComment(content) {
    return document.createComment(content);
  },
  createEmpty: function createEmpty() {
    return this.createComment(' empty ');
  },
  createText: function createText(text) {
    return document.createTextNode(text);
  },
  updateText: function updateText(node, text) {
    var textContentAttr = 'textContent' in document ? 'textContent' : 'nodeValue';
    node[textContentAttr] = text;
  },
  createElement: function createElement(component) {
    var node = document.createElement(component.type);
    var props = component.props;

    (0, _setNativeProps2.default)(node, props);

    return node;
  },
  appendChild: function appendChild(node, parent) {
    return parent.appendChild(node);
  },
  removeChild: function removeChild(node, parent) {
    // TODO, maybe has been removed when remove child
    if (node.parentNode === parent) {
      parent.removeChild(node);
    }
  },
  replaceChild: function replaceChild(newChild, oldChild, parent) {
    parent.replaceChild(newChild, oldChild);
  },
  insertAfter: function insertAfter(node, after, parent) {
    var nextSibling = after.nextSibling;
    if (nextSibling) {
      parent.insertBefore(node, nextSibling);
    } else {
      parent.appendChild(node);
    }
  },
  insertBefore: function insertBefore(node, before, parent) {
    parent.insertBefore(node, before);
  },
  addEventListener: function addEventListener(node, eventName, eventHandler) {
    return node.addEventListener(eventName, eventHandler);
  },
  removeEventListener: function removeEventListener(node, eventName, eventHandler) {
    return node.removeEventListener(eventName, eventHandler);
  },
  removeAllEventListeners: function removeAllEventListeners(node) {
    // TODO
  },
  removeAttribute: function removeAttribute(node, propKey) {
    if (propKey === 'className') {
      propKey = 'class';
    }

    if (node.nodeName.toLowerCase() == 'input' && (propKey == 'checked' && (node.type === 'checkbox' || node.type === 'radio') || propKey == 'value')) {
      node[propKey] = null;
    } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
      node.innerHTML = null;
    } else {
      node.removeAttribute(propKey);
    }
  },
  setAttribute: function setAttribute(node, propKey, propValue) {
    if (propKey === 'className') {
      propKey = 'class';
    }

    if (node.nodeName.toLowerCase() == 'input' && (propKey == 'checked' && (node.type === 'checkbox' || node.type === 'radio') || propKey == 'value')) {
      node[propKey] = propValue;
    } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
      node.innerHTML = propValue.__html;
    } else if (propValue != null) {
      node.setAttribute(propKey, propValue);
    }
  },
  setStyles: function setStyles(node, styles) {
    for (var prop in styles) {
      if (styles.hasOwnProperty(prop)) {
        var val = styles[prop];
        if (_flexbox2.default.isFlexProp(prop)) {
          _flexbox2.default[prop](val, node.style);
        } else {
          node.style[prop] = (0, _unit.convertUnit)(val, prop);
        }
      }
    }
  },
  beforeRender: function beforeRender() {
    // Init rem unit
    (0, _unit.setRem)(this.getWindowWidth() / FULL_WIDTH_REM);
  },
  getWindowWidth: function getWindowWidth() {
    return document.documentElement.clientWidth;
  }
};

exports.default = Driver;