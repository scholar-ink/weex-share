'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports.getInstance = getInstance;
exports.init = init;
exports.registerComponents = registerComponents;
exports.registerMethods = registerMethods;
exports.registerModules = registerModules;
exports.createInstance = createInstance;
exports.refreshInstance = refreshInstance;
exports.destroyInstance = destroyInstance;
exports.getRoot = getRoot;
exports.receiveTasks = receiveTasks;

var _builtin = require('./builtin');

var _emitter = require('./emitter');

var _emitter2 = _interopRequireDefault(_emitter);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var NativeComponents = {};
var NativeModules = {};

var Document = void 0;
var Element = void 0;
var Comment = void 0;
var Listener = void 0;
var sendTasks = void 0;

var instances = {};

function dispatchEventToInstance(event, targetOrigin) {
  var instance;
  for (var i in instances) {
    if (instances.hasOwnProperty(i)) {
      instance = instances[i];
      if (targetOrigin === '*' || targetOrigin === instance.origin) {
        event.target = instance.window;
        // FIXME: Need async?
        instance.window.dispatchEvent(event);
      }
    }
  }
}

function getInstance(instanceId) {
  var instance = instances[instanceId];
  if (!instance) {
    throw new Error('Invalid instance id "' + instanceId + '"');
  }
  return instance;
}

function init(cfg) {
  Document = cfg.Document;
  Element = cfg.Element;
  Comment = cfg.Comment;
  Listener = cfg.Listener;
  sendTasks = cfg.sendTasks;
}

/**
 * register the name of each native component
 * @param  {array} components array of name
 */
function registerComponents(components) {
  if (Array.isArray(components)) {
    components.forEach(function register(name) {
      /* istanbul ignore if */
      if (!name) {
        return;
      }
      if (typeof name === 'string') {
        NativeComponents[name] = true;
      } else if ((typeof name === 'undefined' ? 'undefined' : _typeof(name)) === 'object' && typeof name.type === 'string') {
        NativeComponents[name.type] = name;
      }
    });
  }
}

/**
 * register the name and methods of each api
 * @param  {object} apis a object of apis
 */
function registerMethods(apis) {
  if ((typeof apis === 'undefined' ? 'undefined' : _typeof(apis)) === 'object') {
    // Noop
  }
}

/**
 * register the name and methods of each module
 * @param  {object} modules a object of modules
 */
function registerModules(newModules) {
  if ((typeof newModules === 'undefined' ? 'undefined' : _typeof(newModules)) === 'object') {
    for (var name in newModules) {
      if (Object.prototype.hasOwnProperty.call(newModules, name)) {
        NativeModules[name] = newModules[name];
      }
    }
  }
}

function genBuiltinModules(modules,
// ES
Promise,
// W3C
window, screen, document, navigator, location, fetch, Headers, Response, Request, URL, URLSearchParams, setTimeout, clearTimeout, setInterval, clearInterval, requestAnimationFrame, cancelAnimationFrame, alert,
// Weex
__weex_define__, __weex_require__, __weex_options__, __weex_data__, __weex_downgrade__, __weex_document__) {
  for (var moduleName in _builtin.BuiltinModulesFactory) {
    modules[moduleName] = {
      factory: _builtin.BuiltinModulesFactory[moduleName].bind(null,
      // ES
      Promise,
      // W3C
      window, screen, document, navigator, location, fetch, Headers, Response, Request, URL, URLSearchParams, setTimeout, clearTimeout, setInterval, clearInterval, requestAnimationFrame, cancelAnimationFrame, alert,
      // Weex
      __weex_define__, __weex_require__, __weex_options__, __weex_data__, __weex_downgrade__, __weex_document__),
      module: { exports: {} },
      isInitialized: false
    };
  }
  return modules;
}

function genNativeModules(modules, instanceId) {
  var prefix = '@weex-module/';

  if ((typeof NativeModules === 'undefined' ? 'undefined' : _typeof(NativeModules)) === 'object') {
    var _loop = function _loop(name) {
      var moduleName = prefix + name;
      modules[moduleName] = {
        module: { exports: {} },
        isInitialized: true
      };

      NativeModules[name].forEach(function (method) {
        if (typeof method === 'string') {
          method = {
            name: method
          };
        }

        var methodName = method.name;

        modules[moduleName].module.exports[methodName] = function () {
          for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          var finalArgs = [];
          args.forEach(function (arg, index) {
            var value = args[index];
            finalArgs[index] = normalize(value, getInstance(instanceId));
          });

          sendTasks(String(instanceId), [{
            module: name,
            method: methodName,
            args: finalArgs
          }], '-1');
        };
      });
    };

    for (var name in NativeModules) {
      _loop(name);
    }
  }

  return modules;
}

/**
 * create a Weex instance
 *
 * @param  {string} instanceId
 * @param  {string} code
 * @param  {object} [options] option `HAS_LOG` enable print log
 * @param  {object} [data]
 */
function createInstance(instanceId, code, options /* {bundleUrl, debug} */, data) {
  var Promise = require('runtime-shared/dist/promise.function')();
  var URL = require('runtime-shared/dist/url.function')();
  var URLSearchParams = require('runtime-shared/dist/url-search-params.function')();

  var instance = instances[instanceId];

  if (instance == undefined) {
    (function () {
      var def = function def(id, deps, factory) {
        if (deps instanceof Function) {
          factory = deps;
          deps = [];
        }

        modules[id] = {
          factory: factory,
          deps: deps,
          module: { exports: {} },
          isInitialized: false,
          hasError: false
        };
      };

      var req = function req(id) {
        var mod = modules[id];

        if (mod && mod.isInitialized) {
          return mod.module.exports;
        }

        if (!mod) {
          throw new Error('Requiring unknown module "' + id + '"');
        }

        if (mod.hasError) {
          throw new Error('Requiring module "' + id + '" which threw an exception');
        }

        try {
          mod.isInitialized = true;
          mod.factory(req, mod.module.exports, mod.module);
        } catch (e) {
          mod.hasError = true;
          mod.isInitialized = false;
          throw e;
        }

        return mod.module.exports;
      };

      var ENV = (typeof WXEnvironment === 'undefined' ? 'undefined' : _typeof(WXEnvironment)) === 'object' && WXEnvironment || {};
      var document = new Document(instanceId, options.bundleUrl, null, Listener);
      var location = new URL(document.URL);

      var modules = {};
      // Generate native modules map at instance init
      genNativeModules(modules, instanceId);

      var emitter = new _emitter2.default();

      var window = {
        devicePixelRatio: ENV.scale,
        open: function open(url) {
          var weexNavigator = req('@weex-module/navigator');
          weexNavigator.push({
            url: url,
            animated: 'true'
          }, function (e) {
            // noop
          });
        },
        postMessage: function postMessage(message, targetOrigin) {
          var event = {
            origin: location.origin,
            data: JSON.parse(JSON.stringify(message)),
            type: 'message',
            source: window };
          dispatchEventToInstance(event, targetOrigin);
        },
        addEventListener: function addEventListener(type, listener) {
          emitter.on(type, listener);
        },
        removeEventListener: function removeEventListener(type, listener) {
          emitter.off(type, listener);
        },
        dispatchEvent: function dispatchEvent(e) {
          emitter.emit(e.type, e);
        }
      };

      instance = instances[instanceId] = {
        window: window,
        document: document,
        instanceId: instanceId,
        modules: modules,
        origin: location.origin,
        callbacks: [],
        uid: 0
      };

      // https://www.w3.org/TR/2009/WD-html5-20090423/browsers.html#dom-navigator
      var navigator = {
        product: 'Weex',
        platform: ENV.platform,
        appName: ENV.appName,
        appVersion: ENV.appVersion
      };

      // https://drafts.csswg.org/cssom-view/#the-screen-interface
      var screen = {
        width: ENV.deviceWidth,
        height: ENV.deviceHeight,
        availWidth: ENV.deviceWidth,
        availHeight: ENV.deviceHeight,
        colorDepth: 24,
        pixelDepth: 24
      };

      var timerModuleName = '@weex-module/timer';
      var setTimeout = function setTimeout() {
        for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }

        var timer = req(timerModuleName);
        var handler = function handler() {
          args[0].apply(args, _toConsumableArray(args.slice(2)));
        };
        timer.setTimeout(handler, args[1]);
        return instance.uid.toString();
      };

      var setInterval = function setInterval() {
        for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
          args[_key3] = arguments[_key3];
        }

        var timer = req(timerModuleName);
        var handler = function handler() {
          args[0].apply(args, _toConsumableArray(args.slice(2)));
        };
        timer.setInterval(handler, args[1]);
        return instance.uid.toString();
      };

      var clearTimeout = function clearTimeout(n) {
        var timer = req(timerModuleName);
        timer.clearTimeout(n);
      };

      var clearInterval = function clearInterval(n) {
        var timer = req(timerModuleName);
        timer.clearInterval(n);
      };

      var requestAnimationFrame = function requestAnimationFrame(callback) {
        var timer = req(timerModuleName);
        timer.setTimeout(callback, 16);
        return instance.uid.toString();
      };

      var cancelAnimationFrame = function cancelAnimationFrame(n) {
        var timer = req(timerModuleName);
        timer.clearTimeout(n);
      };

      var alert = function alert(message) {
        var modal = req('@weex-module/modal');
        modal.alert({
          message: message
        }, function () {});
      };

      var downgrade = require('./downgrade.weex')(req);
      var fetch = require('./fetch.weex')(req, Promise);
      var Headers = fetch.Headers,
          Request = fetch.Request,
          Response = fetch.Response;


      var globals = [
      // ES
      Promise,
      // W3C
      window, screen, document, navigator, location, fetch, Headers, Response, Request, URL, URLSearchParams, setTimeout, clearTimeout, setInterval, clearInterval, requestAnimationFrame, cancelAnimationFrame, alert,
      // Weex
      def, req, options, data, downgrade, document];

      genBuiltinModules(modules,
      // ES
      Promise,
      // W3C
      window, screen, document, navigator, location, fetch, Headers, Response, Request, URL, URLSearchParams, setTimeout, clearTimeout, setInterval, clearInterval, requestAnimationFrame, cancelAnimationFrame, alert,
      // Weex
      def, req, options, data, downgrade, document);

      if (ENV.platform !== 'Web') {
        var _init = new Function(
        // ES
        'Promise',
        // W3C
        'window', 'screen', 'document', 'navigator', 'location', 'fetch', 'Headers', 'Response', 'Request', 'URL', 'URLSearchParams', 'setTimeout', 'clearTimeout', 'setInterval', 'clearInterval', 'requestAnimationFrame', 'cancelAnimationFrame', 'alert',
        // Weex
        '__weex_define__', '__weex_require__', '__weex_options__', '__weex_data__', '__weex_downgrade__', '__weex_document__',
        // ModuleJS
        'define', 'require', '"use strict";' + code);

        _init.call(
        // Context is window
        window,
        // ES
        Promise,
        // W3C
        window, screen, document, navigator, location, fetch, Headers, Response, Request, URL, URLSearchParams, setTimeout, clearTimeout, setInterval, clearInterval, requestAnimationFrame, cancelAnimationFrame, alert,
        // Weex
        def, req, options, data, downgrade, document,
        // ModuleJS
        def, req);
      } else {
        var _init2 = new Function('"use strict";' + code);

        _init2.call(window);
      }
    })();
  } else {
    throw new Error('Instance id "' + instanceId + '" existed when create instance');
  }
}

/**
 * refresh a Weex instance
 *
 * @param  {string} instanceId
 * @param  {object} data
 */
function refreshInstance(instanceId, data) {
  var instance = getInstance(instanceId);
  var document = instance.document;
  document.documentElement.fireEvent('refresh', {
    timestamp: Date.now(),
    data: data
  });
  document.listener.refreshFinish();
}

/**
 * destroy a Weex instance
 * @param  {string} instanceId
 */
function destroyInstance(instanceId) {
  var instance = getInstance(instanceId);
  var document = instance.document;
  document.documentElement.fireEvent('destory', {
    timestamp: Date.now()
  });

  if (document.destroy) {
    document.destroy();
  }

  delete instances[instanceId];
}

/**
 * get a whole element tree of an instance
 * for debugging
 * @param  {string} instanceId
 * @return {object} a virtual dom tree
 */
function getRoot(instanceId) {
  var instance = getInstance(instanceId);
  var document = instance.document;
  return document.toJSON ? document.toJSON() : {};
}

function fireEvent(doc, ref, type, e, domChanges) {
  if (Array.isArray(ref)) {
    ref.some(function (ref) {
      return fireEvent(doc, ref, type, e) !== false;
    });
    return;
  }

  var el = doc.getRef(ref);

  if (el) {
    var result = doc.fireEvent(el, type, e, domChanges);
    doc.listener.updateFinish();
    return result;
  }

  return new Error('Invalid element reference "' + ref + '"');
}

function handleCallback(doc, callbacks, callbackId, data, ifKeepAlive) {
  var callback = callbacks[callbackId];
  if (typeof callback === 'function') {
    callback(data);
    if (typeof ifKeepAlive === 'undefined' || ifKeepAlive === false) {
      callbacks[callbackId] = null;
    }
    doc.listener.updateFinish();
    return;
  }

  return new Error('Invalid callback id "' + callbackId + '"');
}

/**
 * accept calls from native (event or callback)
 *
 * @param  {string} instanceId
 * @param  {array} tasks list with `method` and `args`
 */
function receiveTasks(instanceId, tasks) {
  var instance = getInstance(instanceId);
  if (Array.isArray(tasks)) {
    var _ret3 = function () {
      var callbacks = instance.callbacks,
          document = instance.document;

      var results = [];
      tasks.forEach(function (task) {
        var result = void 0;
        if (task.method === 'fireEvent') {
          var _task$args = _slicedToArray(task.args, 4),
              nodeId = _task$args[0],
              type = _task$args[1],
              data = _task$args[2],
              domChanges = _task$args[3];

          result = fireEvent(document, nodeId, type, data, domChanges);
        } else if (task.method === 'callback') {
          var _task$args2 = _slicedToArray(task.args, 3),
              uid = _task$args2[0],
              _data = _task$args2[1],
              ifKeepAlive = _task$args2[2];

          result = handleCallback(document, callbacks, uid, _data, ifKeepAlive);
        }
        results.push(result);
      });
      return {
        v: results
      };
    }();

    if ((typeof _ret3 === 'undefined' ? 'undefined' : _typeof(_ret3)) === "object") return _ret3.v;
  }
}

function normalize(v, instance) {
  var type = typof(v);

  switch (type) {
    case 'undefined':
    case 'null':
      return '';
    case 'regexp':
      return v.toString();
    case 'date':
      return v.toISOString();
    case 'number':
    case 'string':
    case 'boolean':
    case 'array':
    case 'object':
      if (v instanceof Element) {
        return v.ref;
      }
      return v;
    case 'function':
      instance.callbacks[++instance.uid] = v;
      return instance.uid.toString();
    default:
      return JSON.stringify(v);
  }
}

function typof(v) {
  var s = Object.prototype.toString.call(v);
  return s.substring(8, s.length - 1).toLowerCase();
}

exports.default = {
  createInstance: createInstance,
  destroyInstance: destroyInstance,
  getInstance: getInstance,
  getRoot: getRoot,
  init: init,
  receiveTasks: receiveTasks,
  refreshInstance: refreshInstance,
  registerComponents: registerComponents,
  registerMethods: registerMethods,
  registerModules: registerModules
};