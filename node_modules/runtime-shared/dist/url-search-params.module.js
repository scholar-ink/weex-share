module.exports = /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports) {

	'use strict';
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	// https://github.com/WebReflection/url-search-params
	
	var find = /[!'\(\)~]|%20|%00/g,
	    plus = /\+/g,
	    replace = {
	  '!': '%21',
	  "'": '%27',
	  '(': '%28',
	  ')': '%29',
	  '~': '%7E',
	  '%20': '+',
	  '%00': '\x00'
	},
	    replacer = function replacer(match) {
	  return replace[match];
	},
	    iterable = isIterable(),
	    secret = '__URLSearchParams__';
	
	function encode(str) {
	  return encodeURIComponent(str).replace(find, replacer);
	}
	
	function decode(str) {
	  return decodeURIComponent(str.replace(plus, ' '));
	}
	
	function isIterable() {
	  try {
	    return !!Symbol.iterator;
	  } catch (error) {
	    return false;
	  }
	}
	
	var URLSearchParams = function () {
	  function URLSearchParams(query) {
	    _classCallCheck(this, URLSearchParams);
	
	    this[secret] = Object.create(null);
	    if (!query) return;
	    if (query.charAt(0) === '?') {
	      query = query.slice(1);
	    }
	    for (var index, value, pairs = (query || '').split('&'), i = 0, length = pairs.length; i < length; i++) {
	      value = pairs[i];
	      index = value.indexOf('=');
	      if (-1 < index) {
	        this.append(decode(value.slice(0, index)), decode(value.slice(index + 1)));
	      } else if (value.length) {
	        this.append(decode(value), '');
	      }
	    }
	  }
	
	  _createClass(URLSearchParams, [{
	    key: 'append',
	    value: function append(name, value) {
	      var dict = this[secret];
	      if (name in dict) {
	        dict[name].push('' + value);
	      } else {
	        dict[name] = ['' + value];
	      }
	    }
	  }, {
	    key: 'delete',
	    value: function _delete(name) {
	      delete this[secret][name];
	    }
	  }, {
	    key: 'get',
	    value: function get(name) {
	      var dict = this[secret];
	      return name in dict ? dict[name][0] : null;
	    }
	  }, {
	    key: 'getAll',
	    value: function getAll(name) {
	      var dict = this[secret];
	      return name in dict ? dict[name].slice(0) : [];
	    }
	  }, {
	    key: 'has',
	    value: function has(name) {
	      return name in this[secret];
	    }
	  }, {
	    key: 'set',
	    value: function set(name, value) {
	      this[secret][name] = ['' + value];
	    }
	  }, {
	    key: 'forEach',
	    value: function forEach(callback, thisArg) {
	      var dict = this[secret];
	      Object.getOwnPropertyNames(dict).forEach(function (name) {
	        dict[name].forEach(function (value) {
	          callback.call(thisArg, value, name, this);
	        }, this);
	      }, this);
	    }
	  }, {
	    key: 'keys',
	    value: function keys() {
	      var items = [];
	      this.forEach(function (value, name) {
	        items.push(name);
	      });
	      var iterator = {
	        next: function next() {
	          var value = items.shift();
	          return { done: value === undefined, value: value };
	        }
	      };
	
	      if (iterable) {
	        iterator[Symbol.iterator] = function () {
	          return iterator;
	        };
	      }
	
	      return iterator;
	    }
	  }, {
	    key: 'values',
	    value: function values() {
	      var items = [];
	      this.forEach(function (value) {
	        items.push(value);
	      });
	      var iterator = {
	        next: function next() {
	          var value = items.shift();
	          return { done: value === undefined, value: value };
	        }
	      };
	
	      if (iterable) {
	        iterator[Symbol.iterator] = function () {
	          return iterator;
	        };
	      }
	
	      return iterator;
	    }
	  }, {
	    key: 'entries',
	    value: function entries() {
	      var items = [];
	      this.forEach(function (value, name) {
	        items.push([name, value]);
	      });
	      var iterator = {
	        next: function next() {
	          var value = items.shift();
	          return { done: value === undefined, value: value };
	        }
	      };
	
	      if (iterable) {
	        iterator[Symbol.iterator] = function () {
	          return iterator;
	        };
	      }
	
	      return iterator;
	    }
	  }, {
	    key: 'toString',
	    value: function toString() {
	      var dict = this[secret],
	          query = [],
	          i,
	          key,
	          name,
	          value;
	      for (key in dict) {
	        name = encode(key);
	        for (i = 0, value = dict[key]; i < value.length; i++) {
	          query.push(name + '=' + encode(value[i]));
	        }
	      }
	      return query.join('&');
	    }
	  }]);
	
	  return URLSearchParams;
	}();
	
	if (iterable) {
	  URLSearchParams.prototype[Symbol.iterator] = URLSearchParams.prototype.entries;
	}
	
	module.exports = URLSearchParams;

/***/ }
/******/ ]);
//# sourceMappingURL=url-search-params.module.map