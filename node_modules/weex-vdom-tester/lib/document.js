/**
 * @fileOverview dom module APIs
 */

var ref = require('./util');
var clonePlainObject = ref.clonePlainObject;

var ROOT_TYPE_LIST = ['div', 'container', 'list', 'scroller']

var Document = function Document (id, URL) {
  this._id = id
  this._URL = URL
  this.refs = {}
  this.body = null
};

Document.prototype.createBody = function createBody (config) {
    var this$1 = this;

  // validate config existed
  if (!config) {
    console.error("[document] createBody() should have config.")
    return
  }

  // force set ref to '_root'
  config.ref = '_root'

  // validate type
  if (ROOT_TYPE_LIST.indexOf(config.type) < 0) {
    console.error(("[document] root type \"" + (config.type) + "\" must be one of <" + (ROOT_TYPE_LIST.join('>, <')) + ">"))
    return
  }

  config = clonePlainObject(config)

  var body = this.body = new Element(config)
  this.refs._root = this.body
  if (config.children) {
    config.children.forEach(function (child) {
      appendToDoc(this$1, child, body.ref, -1)
      })
    }
  };

  Document.prototype.addElement = function addElement (parentRef, config, index) {
  // validate config
  if (!config) {
    console.error("[document] addElement() should have config.")
    return
  }

  // validate ref
  if (!config.ref) {
    console.error("[document] addElement() should have ref.")
    return
  }
  if (this.refs[config.ref]) {
    console.error(("[document] addElement() the ref \"" + (config.ref) + "\" has been existed."))
    return
  }

  // validate type
  if (!config.type) {
      console.error("[document] addElement() should have type.")
    return
  }

  config = clonePlainObject(config)

  var parent = this.refs[parentRef]

  // validate parentRef
  if (!parent) {
    console.error(("[document] addElement() parent ref \"" + parentRef + "\" is not existed."))
    return
  }

  appendToDoc(this, config, parentRef, index)
  parent.$update(this, parentRef, { addElement: config, index: index })
};

Document.prototype.moveElement = function moveElement (ref, parentRef, index) {
  // validate ref
  if (!ref) {
    console.error("[document] moveElement() should have ref.")
    return
  }
  if (!this.refs[ref]) {
    console.error(("[document] moveElement() the ref \"" + ref + "\" is not existed."))
    return
  }

  // validate parentRef
  if (!parentRef) {
    console.error("[document] moveElement() should have parent ref.")
    return
    }
    if (!this.refs[parentRef]) {
    console.error(("[document] moveElement() the parent ref \"" + parentRef + "\" is not existed."))
    return
  }

  if (contains(this, ref, parentRef)) {
    console.error(("[document] moveElement() the ref \"" + ref + "\" has contained parent ref \"" + parentRef + "\"."))
    return
  }

  var el = this.refs[ref]
  var oldParent = this.refs[el.parentRef]
  var oldIndex = oldParent.children.indexOf(el)

  var parent = this.refs[parentRef]

    if (parent === oldParent && oldIndex <= index) {
    index = index - 1
  }

    oldParent.children.splice(oldIndex, 1)
  parent.children.splice(index, 0, el)
  el.parentRef = parentRef

  if (oldParent) {
    oldParent.$update(this, oldParent.ref, { moveElement: ref, index: index })
  }
    if (parent && parent !== oldParent) {
    parent.$update(this, parentRef, { movedElement: ref, index: index })
  }
};

Document.prototype.removeElement = function removeElement (ref) {
  // validate ref
  if (!ref) {
    console.error("[document] removeElement() should have ref.")
    return
  }
  if (!this.refs[ref]) {
    console.error(("[document] removeElement() the ref \"" + ref + "\" is not existed."))
    return
  }

  var parentRef = this.refs[ref].parentRef

    // validate parentRef
  if (!parentRef) {
    console.error("[document] removeElement() should have parent ref.")
    return
  }
  if (!this.refs[parentRef]) {
    console.error(("[document] removeElement() the parent ref \"" + parentRef + "\" is not existed."))
    return
  }

  var parent = this.refs[parentRef]

  removeEl(this, ref)
  parent.$update(this, parentRef, { removeElement: ref })
};

Document.prototype.updateAttrs = function updateAttrs (ref, attr) {
  attr = clonePlainObject(attr)
  var el = this.refs[ref]
  for (var i in attr) {
    el.attr[i] = attr[i]
  }
  el.$update(this, ref, { attr: attr })
  };

  Document.prototype.updateStyle = function updateStyle (ref, style) {
  style = clonePlainObject(style)
  var el = this.refs[ref]
  for (var i in style) {
    el.style[i] = style[i]
  }
  el.$update(this, ref, { style: style })
  };

  Document.prototype.addEvent = function addEvent (ref, type) {
    var el = this.refs[ref]
  var index = el.event.indexOf(type)
  if (index < 0) {
    el.event.push(type)
  }
  el.$update(this, ref, { addEvent: type })
};

Document.prototype.removeEvent = function removeEvent (ref, type) {
  var el = this.refs[ref]
  var index = el.event.indexOf(type)
    if (index >= 0) {
      el.event.splice(index, 1)
  }
  el.$update(this, ref, { removeEvent: type })
};

Document.prototype.toJSON = function toJSON () {
  var body = this.refs._root
  if (body) {
    return body.toJSON()
  }
  return {}
};

function contains (doc, refA, refB) {
  var elB = doc.refs[refB]
  var parentRef = elB.parentRef
  var parent = doc.refs[parentRef]
  while (parent) {
    if (parentRef === refA) {
      return true
    }
    parentRef = parent.parentRef
    parent = doc.refs[parentRef]
  }
  return false
}

function appendToDoc (doc, config, parentRef, index) {
  var parent = doc.refs[parentRef]

  var el = new Element(config)
  doc.refs[el.ref] = el
  el.parentRef = parentRef

  if (index < 0) {
    parent.children.push(el)
  }
  else {
    parent.children.splice(index, 0, el)
  }

  if (config.children) {
    config.children.forEach(function (child) {
      appendToDoc(doc, child, el.ref, -1)
    })
  }
}

function removeEl (doc, ref) {
  var el = doc.refs[ref]
  var parent = doc.refs[el.parentRef]
  var index = parent.children.indexOf(el)
  var children = el.children || []
  children.forEach(function (child) {
    removeEl(doc, child.ref)
  })
  parent.children.splice(index, 1)
  delete doc.refs[ref]
}

var Element = function Element (config) {
  this.ref = config.ref
  this.parentRef = config.parentRef
  this.type = config.type
  this.attr = config.attr || {}
  this.style = config.style || {}
  this.event = config.event || []
  this.children = []
  this._listeners = []
};

Element.prototype.toJSON = function toJSON () {
  var result = { type: this.type }
  if (Object.keys(this.attr).length > 0) {
    result.attr = this.attr
  }
  if (Object.keys(this.style).length > 0) {
    result.style = this.style
  }
  if (this.event.length > 0) {
    result.event = this.event
  }
  if (this.children.length > 0) {
    result.children = this.children.map(function (child) {
      return child.toJSON()
    })
  }

  return clonePlainObject(result)
};

Element.prototype.$update = function $update (doc, ref, changes, level) {
    level = level || 0
  this._listeners.forEach(function (handler) {
    return handler(ref, changes)
  })
  var parentRef = this.parentRef
  var parent = doc.refs[parentRef]
  if (parent) {
    level++
    parent.$update(doc, ref, changes, level)
  }
};

Element.prototype.$addListener = function $addListener (doc, handler) {
  if (this._listeners.indexOf(handler) >= 0) {
    return
  }
  this.doc = doc
  this._listeners.push(handler)
};

exports.Document = Document
exports.Element = Element
