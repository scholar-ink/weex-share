var ref = require('./document');
var Document = ref.Document;
var Element = ref.Element;
var ref$1 = require('./runtime');
var Runtime = ref$1.Runtime;
var ref$2 = require('./util');
var clonePlainObject = ref$2.clonePlainObject;

var Instance = function Instance (runtime) {
  if (!(runtime instanceof Runtime)) {
    console.error("[instance] can not create a instance without runtime")
    return
  }
  this._runtime = runtime
  this._target = this._runtime.target
  this.id = this._runtime._genInstanceId().toString()
  this._runtime.instanceMap[this.id] = this
  this.doc = new Document(this.id)
  this.lastDoc = null
  this.active = true
  this.watchers = []
  this.extension = {}
  this.spyMap = {}
  this.history = {
      callNative: [],
      callJS: [],
    refresh: []
  }
  this._initCall()
};
Instance.prototype._initCall = function _initCall () {
    var this$1 = this;

  var runtime = this._runtime
  this.callNative = function (id, tasks) {
    if (!this$1.active) {
      return
    }
    if (this$1.id !== id) {
      return
    }
    tasks.forEach(function (task) {
      // Execute real or mocked module API.
      var module = runtime.modules[task.module] || {}
      var method = module[task.method]
      if (this$1.spyMap[task.module] && this$1.spyMap[task.module][task.method]) {
        var args = clonePlainObject(task.args)
        args.unshift(method)
        args.unshift(this$1.doc)
        args.unshift(this$1)
        this$1.spyMap[task.module][task.method].apply(null, args)
      }
      else if (method) {
        var args$1 = clonePlainObject(task.args)
        args$1.unshift(this$1.doc)
        args$1.unshift(this$1)
        method.apply(null, args$1)
      }

      // Record callNative history.
      var taskHistory = clonePlainObject(task)
      taskHistory.timestamp = Date.now()
      this$1.history.callNative.push(taskHistory)

      // Call the watchers on this task
      this$1.watchers.forEach(function (caller) {
        if (!caller.moduleName || task.module === caller.moduleName) {
          if (!caller.methodName || task.method === caller.methodName) {
            var args = clonePlainObject(task.args)
            if (!caller.methodName) {
              args.unshift(task.method)
            }
            if (!caller.moduleName) {
              args.unshift(task.module)
            }
            caller.handler.apply(null, args)
          }
        }
      })
    })
  }
};

Instance.prototype.$create = function $create (code, callbacks, config, data) {
    var this$1 = this;

  if (!this.active) {
    return
  }
  if (typeof code !== 'string' || !code) {
    console.error("[instance] can not createInstance without code")
    return
  }
  try {
    clonePlainObject(config || {})
  }
  catch (e) {
    console.error(("[instance] \"config\" must be plain object or falsy value when createInstance\n" + e))
    return
  }
  try {
    clonePlainObject(data || {})
  }
  catch (e) {
    console.error(("[instance] \"data\" must be plain object or falsy value when createInstance\n" + e))
    return
  }
  var target = this._target
  this.history.refresh.push({
    type: 'createInstance',
    timestamp: Date.now(),
    config: clonePlainObject(config || {}),
    data: clonePlainObject(data || {})
  })
  config = clonePlainObject(config || {})
  data = clonePlainObject(data || {})
  config.env = clonePlainObject(target.WXEnvironment || {})
  return (function (callNative) {
    return target.createInstance(this$1.id, code, config, data, { config: config, callbacks: callbacks })
  })(this.callNative.bind(this))
};
Instance.prototype.$refresh = function $refresh (data) {
  if (!this.active) {
    return
  }
  try {
    clonePlainObject(data || {})
  }
  catch (e) {
    console.error(("[instance] \"data\" must be plain object or falsy value when refreshInstance\n" + e))
    return
  }
  var target = this._target
  this.history.refresh.push({
    type: 'refreshInstance',
    timestamp: Date.now(),
    data: clonePlainObject(data)
  })
  return target.refreshInstance(
    this.id,
    clonePlainObject(data)
  )
};
Instance.prototype.$destroy = function $destroy () {
  if (!this.active) {
    return
  }
  var runtime = this._runtime
  var target = this._target
  this.lastDoc = this.doc
  this.doc = null
  this.history.refresh.push({
    type: 'destroyInstance',
    timestamp: Date.now()
  })
  target.destroyInstance(this.id)
  delete runtime.instanceMap[this.id]
};
Instance.prototype.$fireEvent = function $fireEvent (ref, type, data, domChanges) {
  if (!this.active) {
    return
  }
  if (typeof ref !== 'string' || !ref) {
    console.error("[instance] \"ref\" must be truthy string in fireEvent")
    return
  }
  if (typeof type !== 'string' || !type) {
    console.error("[instance] event \"type\" must be truthy string")
    return
  }
  try {
    clonePlainObject(data || {})
  }
  catch (e) {
    console.error(("[instance] \"data\" must be plain object or falsy value when fireEvent\n" + e))
    return
  }
  try {
    clonePlainObject(domChanges || {})
  }
  catch (e) {
    console.error(("[instance] \"domChanges\" must be plain object or falsy value when fireEvent\n" + e))
    return
  }
  var target = this._target
  this.history.callJS.push({
    method: 'fireEvent',
    timestamp: Date.now(),
      args: clonePlainObject([ref, type, data, domChanges])
  })
  target.receiveTasks(this.id, [{
    method: 'fireEvent',
    args: clonePlainObject([ref, type, data, domChanges])
  }])
};
Instance.prototype.$callback = function $callback (funcId, data, ifLast) {
  if (!this.active) {
    return
  }
  if (typeof funcId !== 'string' || !funcId) {
      console.error("[instance] \"funcId\" must be truthy string in fireEvent")
    return
  }
  try {
    clonePlainObject(data || {})
  }
  catch (e) {
    console.error(("[instance] \"data\" must be plain object or falsy value when callback\n" + e))
    return
  }
  var target = this._target
  this.history.callJS.push({
    method: 'callback',
      timestamp: Date.now(),
      args: clonePlainObject([funcId, data, ifLast])
  })
  target.receiveTasks(this.id, [{
    method: 'callback',
    args: clonePlainObject([funcId, data, ifLast])
  }])
};
Instance.prototype.$getRoot = function $getRoot () {
  if (!this.active) {
    return
  }
  var target = this._target
  return clonePlainObject(target.getRoot(this.id))
};

Instance.prototype.oncall = function oncall (moduleName, methodName, handler) {
  if (typeof moduleName === 'function') {
    handler = moduleName
    methodName = ''
    moduleName = ''
  }
  if (typeof methodName === 'function') {
    handler = methodName
    methodName = ''
  }
  if (!this.watchers.filter(function (caller) { return caller.handler === handler; }).length) {
    this.watchers.push({ moduleName: moduleName, methodName: methodName, handler: handler })
  }
};
Instance.prototype.mockModuleAPI = function mockModuleAPI (moduleName, methodName, handler) {
  if (!this.spyMap[moduleName]) {
    this.spyMap[moduleName] = {}
  }
  this.spyMap[moduleName][methodName] = handler
};
Instance.prototype.getRealRoot = function getRealRoot () {
  return this.doc.body ? this.doc.body.toJSON() : {}
};
Instance.prototype.watchDOMChanges = function watchDOMChanges (element, handler) {
  if (typeof element === 'function') {
    handler = element
    element = this.doc.body
  }
  if (!(element instanceof Element)) {
    console.error("[instance] you can only listen an Element but the target you want listen to is not")
    return
  }
  element.$addListener(this.doc, handler)
};

Instance.prototype.play = function play () {
  this.active = true
};
Instance.prototype.pause = function pause () {
  this.active = false
};

exports.Instance = Instance
